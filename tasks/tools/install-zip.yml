---

# FACTS GATHERING

- name: "[Install {{ amd_apm_release.release }}] Set AMD Toolchain facts"
  ansible.builtin.set_fact:
    amd_apm_tools_package: "{{ amd_apm_packages[amd_apm_release.release]['tools']['zip'][amd_apm_release.update_level]['package'] }}"
    amd_apm_tools_archive_extention: "{{ amd_apm_packages[amd_apm_release.release]['tools']['zip'][amd_apm_release.update_level]['extention'] }}"
    amd_apm_tools_zip_checksum: "{{ amd_apm_packages[amd_apm_release.release]['tools']['zip'][amd_apm_release.update_level]['checksum_md5'] }}"
    amd_apm_tools_prerequisites: "{{ amd_apm_packages[amd_apm_release.release]['tools']['prerequisites'] }}"

- name: "[Install {{ amd_apm_release.release }}] Set archive name fact"
  ansible.builtin.set_fact:
    amd_apm_tools_archive: "{{ amd_apm_tools_package }}{{ amd_apm_tools_archive_extention }}"

- name: "[Install {{ amd_apm_release.release }}] Set tools archive extraction path"
  ansible.builtin.set_fact:
    amd_apm_tools_extraction_path: "{{ amd_apm_tools_download_path }}/{{ amd_apm_release.release }}"
    amd_apm_tools_archive_path: "{{ amd_apm_tools_download_path }}/{{ amd_apm_release.release }}/{{ amd_apm_tools_archive }}"


# CHECK ARCHIVE

- name: "[Install {{ amd_apm_release.release }}] Check if the tools archive has already been extracted"
  stat:
    path: "{{ amd_apm_tools_extraction_path }}/{{ amd_apm_tools_package }}"
  register: amd_apm_tools_extraction_stats

- debug:
    msg: "[INFO] Archive precense assertions will be skipped, because the tools have already been extracted. Allowing users to remove the archive if desired."
  when: amd_apm_tools_extraction_stats.stat.exists

- name: "[Install {{ amd_apm_release.release }}] Extraction directory does not yet exist"
  when: not amd_apm_tools_extraction_stats.stat.exists
  block:
    - name: "[Install {{ amd_apm_release.release }}] Check if the tools archive has already been downloaded"
      stat:
        path: "{{ amd_apm_tools_archive_path }}"
        checksum_algorithm: md5
        get_checksum: True
      register: amd_apm_tools_archive_stats

    - name: "[Install {{ amd_apm_release.release }}] Assert that the zip is available"
      assert:
        that:
          - amd_apm_tools_archive_stats.stat.exists
        fail_msg: "[ERROR] Can't find the AMD tools zip: {{ amd_apm_tools_archive_path }}. Please download it from https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/vitis.html"

    - name: "[Install {{ amd_apm_release.release }}] Assert that the checksum of the zip is correct"
      assert:
        that:
          - amd_apm_tools_archive_stats.stat.checksum == amd_apm_tools_zip_checksum
        fail_msg: "[ERROR] Checksum of zip file does not correspond to expected md5 checksum: {{ amd_apm_tools_archive_path }}. The file might have been tampered with. Please download the correct version from https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/vitis.html"


# EXTRACTION

- debug:
    msg: "[INFO] Extraction will be skipped, because the tools have already been extracted. If you want to redo the extraction, make sure that the archive `{{ amd_apm_tools_archive_path }}` exists, and the extracted archive at location `{{ amd_apm_tools_extraction_path }}/{{ amd_apm_tools_package }}` is deleted."
  when: amd_apm_tools_extraction_stats.stat.exists

- when:
    - not amd_apm_tools_extraction_stats.stat.exists
  block:
    - name: "[Install {{ amd_apm_release.release }}] Ensure Vitis archive extraction directory exists"
      ansible.builtin.file:
        path: "{{ amd_apm_tools_extraction_path }}/{{ amd_apm_tools_package }}"
        state: directory

    - name: "[Install {{ amd_apm_release.release }}] Extract Vitis core archive (100+ GB file, may take a while...)"
      unarchive:
        src: "{{ amd_apm_tools_archive_path }}"
        dest: "{{ amd_apm_tools_extraction_path }}"
        remote_src: yes
        extra_opts: "--no-same-owner"


# INSTALL

- name: "[Install {{ amd_apm_release.release }}] Install prerequisite packages"
  package:
    name: amd_apm_tools_prerequisites
    state: present

- name: "[Install {{ amd_apm_release.release }}] Ensure Vitis install directory exists"
  ansible.builtin.file:
    path: "{{ amd_apm_tools_install_path }}"
    state: directory

- name: "[Install {{ amd_apm_release.release }}] Ensure /root/.Xilinx directory exists"
  ansible.builtin.file:
    path: /root/.Xilinx
    state: directory

# TODO: add configs to a version directory: eg. /root/.Xilinx/2024.2/install_config.txt
- name: "[Install {{ amd_apm_release.release }}] Generate AMD tools configuration file"
  expect:
    command: "./xsetup --batch ConfigGen --location {{ amd_apm_tools_install_path }} --product '{% if amd_apm_release.vivado_only %}Vivado{% else %}Vitis{% endif %}'"
    responses:
      "Please choose: ":
        - "1"
  args:
    chdir: "{{ amd_apm_tools_extraction_path }}/{{ amd_apm_tools_package }}"

# TODO: move config editing to seperate tasks file and reuse with other install tasks
- name: "[Install {{ amd_apm_release.release }}] Disable shortcut creation"
  lineinfile:
    path: /root/.Xilinx/install_config.txt
    regexp: "{{ item.regexp }}"
    line: "{{ item.line  }}"
  loop:
    - { regexp: '^CreateProgramGroupShortcuts=', line: 'CreateProgramGroupShortcuts=0' }
    - { regexp: '^CreateShortcutsForAllUsers=', line: 'CreateShortcutsForAllUsers=0' }
    - { regexp: '^CreateDesktopShortcuts=', line: 'CreateDesktopShortcuts=0' }
    - { regexp: '^CreateFileAssociation=', line: 'CreateFileAssociation=0' }

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# SELECTING DEVICES TO INSTALL
# TODO: Make this more specific instead of installing all devices: allow for a selection

- name: Read the file content
  ansible.builtin.slurp:
    src: /root/.Xilinx/install_config.txt
  register: file_content

- name: Extract the Modules= line
  set_fact:
    modules_line: "{{ (file_content.content | b64decode).splitlines() | select('match', '^Modules=') | list | first }}"

- name: Extract module entries
  set_fact:
    module_entries: "{{ modules_line.split('=', 1)[1].split(',') }}"

- name: Normalize module entries to end with :1
  set_fact:
    normalized_modules: "{{ module_entries | map('regex_replace', ':(\\d+)$', ':1') | list }}"

- name: Rebuild the line
  set_fact:
    new_modules_line: "Modules={{ normalized_modules | join(',') }}"

- name: Replace the Modules= line in the file
  ansible.builtin.lineinfile:
    path: /root/.Xilinx/install_config.txt
    regexp: '^Modules='
    line: "{{ new_modules_line }}"

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

- name: "[Install {{ amd_apm_release.release }}] Install tools (this usually takes about 2 hours, but can take up to 6 hours...)"
  command: "./xsetup --batch Install --config /root/.Xilinx/install_config.txt --agree XilinxEULA,3rdPartyEULA"
  args:
    chdir: "{{ amd_apm_tools_extraction_path }}/{{ amd_apm_tools_package }}"
  vars:
    # wait up to 6 hours
    ansible_command_timout: 21600
    ansible_ssh_timout: 21600

