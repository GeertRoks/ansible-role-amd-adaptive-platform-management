---

# CHECK
# loop over all versions that need to be installed:
# options:
#   - amd_apm_release: 2020.1? - 2025.1
#   - tools: vitis and/or vivado

    #- "Vitis"
    #- "Vitis_HLS"
    #- "Vivado"
    #- "Model_Composer"
- name: Vitis pre install check
  stat:
    path: "{{ amd_apm_tools_install_path }}/Vitis/{{ release }}"
  with_list: "{{ amd_apm_releases }}"
  register: amd_apm_tools_pre_install_vitis_check
  loop_control:
    loop_var: release

- name: Vivado pre install check
  stat:
    path: "{{ amd_apm_tools_install_path }}/Vivado/{{ release }}"
  with_list: "{{ amd_apm_releases }}"
  register: amd_apm_tools_pre_install_vivado_check
  loop_control:
    loop_var: release

# REMOVE

#TODO: remove is currently not yet safe. Fix the find task in this taskfile
- name: Remove other Vitis/Vivado releases
  include_tasks: ./uninstall.yml
  when: false


# CHECK SPACE

# Checking versions of vivado, because vivado is always installed independent of install_vitis variable
- name: Find all versions of Vivado that are installed and are requested to be installed
  find:
    paths: "{{ amd_apm_tools_install_path }}/Vivado/"
    patterns: "{{ amd_apm_releases }}"
    file_type: directory
    use_regex: false
  register: amd_apm_tools_installed_releases

- name: Find the mount point of the installation path
  set_fact:
    amd_apm_tools_install_mount_point: "{{ ansible_mounts | selectattr('mount', 'in', amd_apm_tools_install_path) | sort(attribute='mount', reverse=true) | first }}"

- debug:
    msg: "{{ amd_apm_tools_install_mount_point }}"

#TODO: check if 300GB is correct or too conservative
- name: "Assert that there is enough space (300 GB per release) on disk ({{ amd_apm_tools_install_mount_point }}) for Vitis+Vivado installation. ({{ amd_apm_releases | length }} releases requested, {{ amd_apm_tools_installed_releases.matched }} releases already installed, so need {{ 300 * (amd_apm_releases|length - amd_apm_tools_installed_releases.matched) }} GB freespace)"
  assert:
    that: amd_apm_tools_install_mount_point.size_available | int is gt ( (amd_apm_releases|length - amd_apm_tools_installed_releases.matched) * 300000000000)
    fail_msg: "Disk does not have the minimum space required to Install Vitis Core Development Kit ({{ 300 * (amd_apm_releases|length - amd_apm_tools_installed_releases.matched) }} GB requested). Consider making space on drive or only installing vivado by setting `amd_apm_tools_install_vitis: false` to the variables of your playbook"
  when: amd_apm_tools_install_vitis

#TODO: check if 100GB is correct or too conservative
- name: "Assert that there is enough space (100 GB per release) on disk ({{ amd_apm_tools_install_mount_point }}) for Vivado only installation. ({{ amd_apm_releases | length }} releases requested, {{ amd_apm_tools_installed_releases.matched }} releases already installed, so need {{ 100 * (amd_apm_releases|length - amd_apm_tools_installed_releases.matched) }} GB freespace)"
  assert:
    that: amd_apm_tools_install_mount_point.size_available | int is gt ( (amd_apm_releases|length - amd_apm_tools_installed_releases.matched) * 100000000000)
    fail_msg: "Disk does not have the minimum space required to Install Vitis Core Development Kit ({{ 100 * (amd_apm_releases|length - amd_apm_tools_installed_releases.matched) }} GB requested). Consider making space on drive or only installing vivado by setting `amd_apm_tools_install_vitis: false` to the variables of your playbook"
  when: not amd_apm_tools_install_vitis

- fail:
    msg: "stop"



- name: Set AMD Toolchain path facts
  set_fact:
    amd_apm_tools_download_path: "{{ amd_apm_download_path }}/tools"
    amd_apm_tools_extraction_path: "{{ amd_apm_tools_download_path }}/{{ amd_apm_tools_package }}"


# DOWNLOAD
# runs when:
#   - vivado release directory does not exist
#   or
#   - vitis should be installed and the specific vitis release directory does not exist
- name: Download AMD Toolchain
  include_tasks:
    file: "./download-zip-{% if amd_apm_download_locally %}local{% else %}remote{% endif %}.yml"
  with_list: "{{ amd_apm_tools_pre_install_vivado_check.results }}"
  vars:
    amd_apm_release: "{{ item.release }}"
  when: >
      item.stat.exists == false or
      amd_apm_tools_install_vitis and
      not amd_apm_tools_pre_install_vitis_check.results | list | selectattr('release', 'equalto', item.release) | selectattr('stat.exists')


# INSTALL
# runs when:
#   - vivado release directory does not exist
#   or
#   - vitis should be installed and the specific vitis release directory does not exist
- name: Install AMD Toolchain
  include_tasks: ./install-zip.yml
  with_list: "{{ amd_apm_tools_pre_install_vivado_check.results }}"
  vars:
    amd_apm_release: "{{ item.release }}"
  when: >
      item.stat.exists == false or
      amd_apm_tools_install_vitis and
      not amd_apm_tools_pre_install_vitis_check.results | list | selectattr('release', 'equalto', item.release) | selectattr('stat.exists')
