---

- name: Gather directories of releases to delete
  find:
    paths: "{{ amd_apm_vitis_core_install_path }}"
    file_type: directory
    excludes: 
      - "{{ amd_apm_release }}"
  register: vitis_core_release_directories_to_delete

- name: Delete older release directories
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ vitis_core_release_directories_to_delete['files'] }}"

- name: Remove any source scripts from general bashrc that are not of specified release
  lineinfile:
    path: /etc/bash.bashrc
    regexp: '^source\s+{{ amd_apm_vitis_core_install_path }}/{{ item }}/(?!{{ amd_apm_release }})[^/]+/settings64\.sh'
    state: absent
  loop:
    - "Vivado"
    - "Vitis_HLS"
    - 'Vitis'
    - "Model_Composer"

- name: Remove any Vitis Model Composer from system-wide PATH that are note of specified release
  lineinfile:
    path: /etc/bash.bashrc
    regexp: '^export\s+PATH={{ amd_apm_vitis_core_install_path }}/Model_Composer/(?!{{ amd_apm_release }})[^/]+/bin:\$PATH'
    state: absent

#- name: Gather Facts about Vitis directory
#  stat:
#    path: "{{ amd_apm_vitis_core_install_path }}/Vitis/{{ amd_apm_release }}"
#  register: Vitis_version_directory
#
#- name: Check if Vitis version directory exists
#  assert:
#    that: Vitis_version_directory.stat.exists == true
#
#- name: Find all directories in the Vivado folder
#  find:
#    paths:
#      - "{{ amd_apm_vitis_core_install_path }}/Vitis"
#      - "{{ amd_apm_vitis_core_install_path }}/Vitis_HLS"
#      - "{{ amd_apm_vitis_core_install_path }}/Vivado"
#    file_type: "directory"
#    recurse: false
#  register: vitis_versions
#
#- debug:
#    msg: "{{vitis_versions}}"
#
#
#- name: test
#  assert:
#    that:
#      - vitis_versions.files|length == 1
#      - vitis_versions.files[0].path == "/tools/Xilinx/Vitis/{{amd_apm_release}}"
#
